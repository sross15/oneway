typeof(deviation)
x <- runif(100)
sqrt(mean(square(deviation(x))))
square <- function(x) x^2
deviation <- function(x) x - mean(x)
x <- runif(100)
sqrt(mean(square(deviation(x))))
install.packages("magrittr")
x %>%
deviation() %>%
square() %>%
mean() %>%
sqrt()
library(magrittr)
x %>%
deviation() %>%
square() %>%
mean() %>%
sqrt()
f <- function(x) {
f <- function(x) {
f <- function() {
x ^ 2
}
f() + 1
}
f(x) * 2
}
f(10)
h02 <- function(x) {
force(x)
10
}
h01(stop("This is an error!"))
h02 <- function(x) {
force(x)
10
}
h02(stop("This is an error!"))
z <- 100
f2()
f2 <- function(x = z) {
z <- 100
x
}
f2()
source('~/Downloads/Advanced Reading-Reading 3.R')
?
?force()
f2 <- function(x = z) {
z <- 100
x
}
f2 <- function(x = z) {
z <- 100
x
}
f2()
x + y
x = 3
y = 2
x + y
`+` (x,y)
`+` (x*y)
x+y
`+` <- function(x,y)
{
x*y
}
x + y
`%+%` <- function(a,b) paste0(a, b)
"new " %+% "string"
`second<-` function(x, value) {
x[2] <- value
}
`second<-` <- function(x, value) {
x[2] <- value
x
}
second(x) <- 5L
x
x <- 1:10
second(x) <- 5L
x
args <- list(1:10, na.rm = T)
do.call(mean, args)
x <- runif(1, 0, 10)
if(x > 3) {
y <- 10
} elseif(x == x) {
y <- 1
} else {
y <- 0
}
if(x > 3) {
y <- 10
} elseif(x == 10) {
y <- 1
} else {
y <- 0
}
if(x > 3) {
y <- 10
} else if(x == 10) {
y <- 1
} else {
y <- 0
}
numbers <- rnorm(10)
for(i in 1:10) {
print(numbers[i])
}
print(x[i])
x  <- c("a", "b", "c", "d")
for(i in seq_along(x)) {
print(x[i])
}
x <- matrix(1:6, 2, 3)
View(x)
print(x[i, j])
for(i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))) {
print(x[i, j])
}
}
for(i in 1:100) {
print(i)
if(i > 20) {
## Stop loop after 20 iterations
break
}
}
!require(dplyr)
require(dplyr)
# Returns whether or not I have dplyr and then downloads it if necessary
!require(dplyr)
install.packages("dplyr")
x <- c(5,3,4,5)
x <- c(5,3,4,5)
attr(x, "name") <- y
attributes(x)
x <- c(5,3,4,5)
attributes(x)
attr(x, "name") <- y
attributes(x)
x <- table(mtcars$cyl, mtcars$gear)
attriutes(x)
attributes(x)
row.names(x)
c(12, 3, TRUE, "a")
?factor()
race <- factor(c("White", "Black", "Hispanic"), levels = c(3, 1, 2))
race
race <- factor(c("White", "Black", "Hispanic"), levels = c(3, 1, 2),
labels = c("White", "Black", "Hispanic"))
race
race <- factor(levels = c(3, 1, 2),
labels = c("White", "Black", "Hispanic"))
race
labels(race)
race <- factor(levels = c(3, 1, 2),
labels = c("White", "Black", "Hispanic"),
ordered = TRUE)
race
date <- "2018-09-20"
as.Date(date)
attribute(date)
attributes(date)
# Creating a date
date <- "2018-09-20"
attributes(date)
as.Date(date)
attributes(date)
typeof(date)
date <- as.Date(date)
typeof(date)
df1 <- data.frame(x = 1:3,
y = c("a", "b", "c"),
stringsAsFactors = FALSE)
df
df1
list <- list(c(TRUE, "abcd", 312.33, 89L))
str(list)
str(list[[1]])
list <- list(c(TRUE, "abcd", 312.33, 89L))
x <- matrix(1:4, nrow = 2)
attributes(matrix)
attributes(x)
data(mtcars)
length(mtcars)
df <- data.frame(x = c(1, 2, 3, 4),
y = c(6, 7))
View(df)
install.packages("tibble")
tbl <- tibble(x = c(1, 2, 3, 4),
y = c(6,7))
tbl <- tibble(x = c(1, 2, 3, 4),
y = c(6))
# Recycles the 6 and 7
library(tibble)
tbl <- tibble(x = c(1, 2, 3, 4),
y = c(6))
View(tbl)
View(tbl)
data(mtcars)
head(mtcars)
# Data frame will turn one column into a vector
df1 <- mtcars$mpg
typeof(df1)
tibble <- tibble(data(mtcars))
View(tibble)
tibble <- tibble(df1)
df1
typeof(df1)
View(tibble)
x <- c(a = 1, b = 2, c = 3)
# Return first element
x[1]
x[c(-2, -3)]
x[TRUE, FALSE, FALSE]
x[c(TRUE, FALSE, FALSE)]
x <- list(a=1:3, b='abc', c=4:6)
#Returns a subsetted list
x[1]
# Returns contents
x[[1]]
x$a
typeof(x[1])
mtcars[mtcars$cyl == 4 & mtcars$am == 0, ]
typeof(mtcars[mtcars$cyl == 4 & mtcars$am == 0, ])
mtcars$cyl
mtcars$am == 0
mtcars1 <- mtcars[mtcars$cyl == 4 & mtcars$am == 0, ]
View(mtcars1)
names(mtcars)
order(names(mtcars))
names(order(names(mtcars)))
names(mtcars)[order(names(mtcars))]
mtcars( , order(names(mtcars)))
mtcars[ , order(names(mtcars))]
Library <- function(x) {
if(!require(x, character.only = TRUE)) {
msg <- paste("Install package", x, "(y/n)? ")
answer <- readline(msg)
if (toupper(answer == "Y")) {
install.packages(x)
require(x, character.only = TRUE)
} else {
stop("The program requires installation of this package")
}
}
}
Library("B2Z")
library("B2Z")
remove.packages("B2Z")
Library <- function(x) {
if(!require(x, character.only = TRUE)) {
msg <- paste("Install package", x, "(y/n)? ")
answer <- readline(msg)
if (toupper(answer == "Y")) {
install.packages(x)
require(x, character.only = TRUE)
} else {
stop("The program requires installation of this package")
}
}
}
Library("B2Z")
detach("B2Z")
detach(package = B2Z)
install.packages("B2Z")
install.packages("B2Z")
summary(women)
fit = lm(weight ~ height, women)
summary(fit)
class(women)
class(fit)
summary
methods(summary)
?
# but can get the code from hidden functions
getAnywhere(summary.aspell)
x <- 1:5
# this function will force functions to run off of mymethod
mymethod <- function(x, ...) {
UseMethod("mymethod")
}
mymethod.a <- function(x) {
print("Using A")
}
mymethod.b <- function(x) {
print("Using B")
}
mymethod.default <- function(x) {
print("Using Default")
}
x <- 1:5
class(x) <- "a"
y <- 6:10
class(y) <- "b"
z <- 10:15
mymethod(x)
mymethod(z)
class(z) <- c("a", "b")
mymethod(z)
women
class(women) <- "lm"
summary(women)
data(mpg, package = ggplot2)
data(mpg, package = "ggplot2")
data(mpg, package = "ggplot2")
b <- data(mpg, package = "ggplot2")
b <- data(mpg, package = "ggplot2")
b <- as.data.frame(b)
View(b)
data(mpg, package = "ggplot2")
fit <- lm(hwy ~ class, mpg)
summary(fit)
aggregate(mpg$hwy, list(mpg$class), mean)
boxplot(mpg$hwy, class, mean)
boxplot(hwy ~ class, mpg)
aggregate(mpg$hwy, list(mpg$class), mean)
# summary stats
stats <- aggregate(formula,
data,
function(x) c(mean=mean(x), sd(x))
)
oneway <- function(formula, data) {
#listwise deletion of missing values (all data this is missing will be deleted)
data.complete <- na.omit(data)
# ANOVA
fit <- lm(formula, data_complete)
# summary stats
stats <- aggregate(formula,
data,
function(x) c(mean=mean(x), sd(x))
)
}
oneway <- function(formula, data) {
#listwise deletion of missing values (all data this is missing will be deleted)
data.complete <- na.omit(data)
# ANOVA
fit <- lm(formula, data.complete)
# summary stats
stats <- aggregate(formula,
data,
function(x) c(mean=mean(x), sd(x))
)
result <- list(anova = fit, summary_stats = stats)
class(result) <- c("oneway", "list")
return(result)
}
oneway(hwy ~ class, mpg)
data(mpg)
data(mpg)
data(mpg)
oneway <- function(formula, data) {
#listwise deletion of missing values (all data this is missing will be deleted)
data.complete <- na.omit(data)
# ANOVA
fit <- lm(formula, data.complete)
# summary stats
stats <- aggregate(formula,
data.complete,
function(x) c(mean=mean(x), sd(x))
)
result <- list(anova = fit, summary_stats = stats)
class(result) <- c("oneway", "list")
return(result)
}
plot.oneway <- function(x, ...) {
if(!inherits(x, "oneway")) stop("Must be class 'oneway")
boxplot(x$anova$terms, x$anova$model, col = "skyblue", ...)
}
mpg
data(mpg)
data(mpg, package = "ggplotw")
data(mpg, package = ggplot2)
data(mpg, package = "ggplot2")
mileage <- oneway(hwy ~ class, mpg)
mileage
plot(mileage)
View(mileage)
# Use view to see the terms in a list
# Access each level with a $
# i.e.
mileage$anova$fitted.values
summary.oneway <- function(x, ...) {
if(!inherits(x, "oneway")) {
stop("Must be class 'oneway'")
}
print(anova(x$anova))
}
fit <- lm(hwy ~ class, mpg)
anova(fit)
summary(mileage)
print.oneway <- function(x, ...) {
if(!inherits(x, "oneway")) {
stop("Must be class 'oneway'")
}
cat("Summary Statistics\n",
"====================================\n", sep = "")
print(x$summary_stats)
cat("Anova\n",
"====================================\n", sep = "")
print(summary.lm(x$anova))
# use standard summary function to print fit: x$anova
# which are the anova values
}
print(mileage)
#read in data
CCD <- read.csv("/Users/shaneross/Documents/Machine Learning--Data Mining/default of credit card clients.csv", stringsAsFactors = F, header = T)
getwd()
setwd("Users/shaneross/Documents/Macahine Learning--Data Mining")
setwd("/Users/shaneross/Documents/Machine Learning--Data Mining")
#read in data
CCD <- read.csv("/Users/shaneross/Documents/Machine Learning--Data Mining/default of credit card clients.csv", stringsAsFactors = F, header = T)
#read in data
CCD <- read.csv("/Users/shaneross/Documents/Machine Learning--Data Mining/default of credit card clients.csv", stringsAsFactors = F, header = T)
View(CCD)
#rename variables for easier future use
names <-c("ID", "LIMIT", "SEX", "EDUCATION", "MARRIAGE", "AGE", "REPAID_SEPT", "REPAID_AUG", "REPAID_JULY", "REPAID_JUNE", "REPAID_MAY", "REPAID_APR", "BILL_SEPT", "BILL_AUG", "BILL_JULY", "BILL_JUNE", "BILL_MAY", "BILL_APR","PAYMENT_SEPT", "PAYMENT_AUG", "PAYMENT_JULY", "PAYMENT_JUNE", "PAYMENT_MAY", "PAYMENT_APR", "default.payment.next.month")
names(CCD) <- names
apply(CCD, 2, function(x){length(x[is.na(x)])})
CCD <- apply(CCD, 2, as.numeric)
CCD <- data.frame(CCD)
View(CCD)
CCD <- CCD[-1, ]
View(CCD)
#Change all of the repayment status variables to factors
CCD[c(7:12)] <- apply(CCD[c(7:12)], 2, function(x){return(factor(x,
levels=c(-2:9), labels = c("No Consumption", "Paid Duly", "Use of Revolving Credit", "1 Month Delay","2 Month Delay","3 Month Delay","4 Month Delay","5 Month Delay","6 Month Delay","7 Month Delay","8 Month Delay","9+ Month Delay" )))})
View(CCD)
CCD[c(7:12)] <- apply(CCD[c(7:12)], 2, function(x){(return(as.factor(as.character(x))))})
#Partition the data for training and testing
library(caret)
install.packages("caret")
#Partition the data for training and testing
library(caret)
set.seed(1234)
index <- createDataPartition(CCD$default.payment.next.month, p=0.7, list=FALSE)
head(index)
View(index)
train_CCD <- CCD[index, ]
View(train_CCD)
test_CCD  <- CCD[-index, ]
View(test_CCD)
ggplot(data=CCD, aes(x=default.payment.next.month)) + geom_bar()
qplot(CCD$AGE,
geom= "histogram",
binwidth = 1,
main = "Ages of Taiwanese Credit Card Clients",
xlab = "AGE",
fill=I("blue"),
col=I("red"),
alpha=I(.2),
xlim=c(0, 80))
histogram(CCD$BILL_SEPT)
histogram(CCD$BILL_AUG)
histogram(CCD$LIMIT)
histogram(CCD$PAYMENT_SEPT)
ggplot(data=CCD, aes(y=AGE, x=default.payment.next.month)) +
geom_boxplot()
ggplot(data=CCD, aes(y=LIMIT, x=default.payment.next.month)) +
geom_boxplot()
ggplot(data=CCD, aes(x=REPAID.SEPT, fill=default.payment.next.month)) +
geom_bar(position="fill") +
coord_flip()
ggplot(logistic_probabilities, aes(x=LIMIT, y=Default)) +
geom_point(color="dark blue", size=.5) +   # change the color and size of points
geom_smooth(method=lm, se=FALSE, color="dark red") + # add a fitted line
ggtitle("Probability of Defaulting by Credit Provided") + # add a title to the plot
theme(plot.title = element_text(hjust = 0.5))
logistic_probabilities$LIMIT <- train_CCD$LIMIT
cor.test(train_CCD$LIMIT, logistic_probabilities$Default)
install.packages(c("devtools", "roxygen2"), depend = TRUE)
library(c(devtools, oxygen))
library(devtools)
library(oxygen)
library(roxygen2)
setwd("~/Desktop/projects/oneway")
setwd()
getwd()
library(ggplot2)
cars <- mpg[c("hwy", "class", "year")]
View(cars)
save(cars, file="cars.rda")
help(lm)
library(oneway)
?oneway
library(oneway)
?oneway
library(oneway)
help(cars)
library(devtools)
spell_check()
getwd()
?oneway
library(oneway)
?oneway
plot(mileage)
plot(mileage, oneway())
library(ggplot2)
cars <- mpg[c("hwy", "class", "year")]
save(cars, file = "data/cars.rda", compress = "xz")
library(devtools)
use_vignette("introduction_to_oneway")
library(oneway)
install.packages("pkgdown")
library(pkgdown)
build_site()
build_site()
